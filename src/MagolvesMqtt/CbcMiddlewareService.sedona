class CbcMiddlewareService extends Service
{
  ////////////////////////////////////////////////////////////////
  // Properties
  ////////////////////////////////////////////////////////////////
  @config @asStr property Buf(64) host
  @config property int port = 1883

  @config @asStr property Buf(16) clientid
  @config @asStr property Buf(16) username
  @config @asStr property Buf(16) password
  
  @config property bool autoStart = true

  ////////////////////////////////////////////////////////////////
  // Life cycle
  ////////////////////////////////////////////////////////////////

  **
  ** Init and start CBC middleware service 
  **
  virtual override void start()
  {
    log.message("Middleware service starting...")
    handle = startSession(host.toStr(), port, clientid.toStr(), username.toStr(), password.toStr())
    if (handle != null) {
      log.message("Middleware service started")
    } else {
      log.error("Middleware service error")
    }    
  }

  ** 
  ** stop middleware service
  ** 
  virtual override void stop()
  {
    if (handle != null) {
      stopSession(handle);
      log.message("Middleware service stopped")
    } else {
      log.warning("Middleware service not started")
    }
  }

  ////////////////////////////////////////////////////////////////
  // Methods
  ////////////////////////////////////////////////////////////////
  public Obj getHandle()
  {
    if (isSessionLive(handle))
      return handle
    else
      return null
  }


  // natives 
  **
  ** Start a middleware session to given host:port using clientid, username and password.
  ** a session handle object will be returned, that will be used by later
  ** native calls on this session.
  ** 
  static native Obj startSession(Str host, int port, Str clientid, Str username, Str password)

  ** 
  ** stop the middleware session for given session handle object
  ** 
  static native void stopSession(Obj handle)

  ** 
  ** check if session for given session handle object live or not 
  ** 
  static native bool isSessionLive(Obj handle)

  ** 
  ** Get the connection state
  ** 
  static native int getStatus()

  static native bool exportSlot(Obj handle, Component c, Slot slot, Obj path);

  ////////////////////////////////////////////////////////////////
  // Fields
  ////////////////////////////////////////////////////////////////
  define Log log

  private Obj handle = null
}
