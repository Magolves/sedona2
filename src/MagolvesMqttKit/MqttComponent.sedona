class MqttComponent extends Component {
  ** deadband centered around setPoint
  @config @summary property float hysteresis = 6.0f

  ** set true to put into heating mode
  @config @summary property bool enabled = true

  ** the setpoint
  @config @summary property float setPoint = 5.0

  ** the day setpoint
  @config @summary property float setPointDay = 45.0

  ** the night setpoint
  @config @summary property float setPointNight = 25.0

  ** actualTemp
  property float actualTemp = 20.0

  ** calls for cooling or heating as required by setPoint/actualTemp/isheating
  @readonly property bool isHeating

  define int Off = 0
  define int Frost` = 1
  define int Night = 2
  define int Day = 3

  define Str Mode = "Off,Frost,Night,Day"
  @range=Mode
  @readonly property byte status = Day

  virtual override void start()
  {
      registerMqtt()
  }
  
  **
  ** Behavior to execute when a property is changed externally
  ** 
  override void changed(Slot slot)
  {
    super.changed(slot)

    // If maxTime state changes at runtime, update private (long) copy
    if (slot == setPointDay || slot == setPointNight)
    {
      updateSetPoint()
    }
  }

  **
  ** Execute is called once every scan.
  **
  virtual override void execute()
  {
    float lowTemp = setPoint - hysteresis
    
    if (isHeating)
      isHeating := enabled && actualTemp <= setPoint
    else
      isHeating := enabled && actualTemp <= lowTemp 

    if (Sys.ticks() % 10000L == 0L)
    {
      if (isHeating)
        actualTemp := actualTemp + 0.1
      else if (actualTemp > 10.0)
        actualTemp := actualTemp - 0.02
      //Sys.out.print("actualTemp changed to $actualTemp").nl()
    }
   
  }

  float getSetPoint()
  {
    switch(mode) {
      case Off: return 0.0
      case Frost: return 5.0
      case Night: return setPointNight
      case Day: return setPointDay
    }
  }

  action void off() 
  {
    setMode(Off)
  }

  action void frost() 
  {
    setMode(Frost)
  }

  action void night() 
  {
    setMode(Night)
  }

  action void day() 
  {
    setMode(Day)
  }

  private void setMode(int newMode) 
  {
    enabled := newMode != Off
    mode := newMode
    updateSetPoint()
  }

  private void updateSetPoint() 
  {
    setPoint := getSetPoint()
  }

  action void regMqtt()
  {
    registerMqtt()
  }


  private void registerMqtt() {
    //if (registered) return

    MiddlewareService service = (MiddlewareService)Sys.app.lookupService(MiddlewareService.type)
      if (service == null) {
        App.log.error("MiddlewareService is missing")
        return
      }

      Str path = MiddlewareService.getTopicFromPath(this)
      Obj h = service.getHandle()
      if (h != null) {
        MiddlewareService.registerReadOnlySlot(h, this, type.findSlot("actualTemp"), path)
        MiddlewareService.registerReadOnlySlot(h, this, type.findSlot("setPoint"), path)
        MiddlewareService.registerWritableSlot(h, this, type.findSlot("enabled"), path)      
        MiddlewareService.registerReadOnlySlot(h, this, type.findSlot("isHeating"), path) 
        registered = true
      } else {
        App.log.error("Session not active")
      }
  }

  bool registered = false
}