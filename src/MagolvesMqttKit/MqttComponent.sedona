class MqttComponent extends Component {
  define int TOPIC_STR_LEN = 256;

  @config @asStr property Buf(TOPIC_STR_LEN) mqttTopic = "root"

      ** deadband centered around setPoint
  @config @summary property float hyst = 6.0f

  ** set true to put into heating mode
  @config @summary property bool  enabled = true

  ** the setpoint
  @config @summary property float setPoint = 50.0

  ** actualTemp
  property float actualTemp = 20.0

  ** calls for cooling or heating as required by setPoint/actualTemp/isheating
  @readonly property bool isHeating

  virtual override void start()
  {
      registerMqtt()
  }

  **
  ** Execute is called once every scan.
  **
  virtual override void execute()
  {
    float lowTemp = setPoint - hyst
    
    if (isHeating)
      isHeating := enabled && actualTemp <= setPoint
    else
      isHeating := enabled && actualTemp <= lowTemp 

    if (Sys.ticks() % 10000L == 0L)
    {
      if (isHeating)
        actualTemp := actualTemp + 0.1
      else if (actualTemp > 10.0)
        actualTemp := actualTemp - 0.02
      //Sys.out.print("actualTemp changed to $actualTemp").nl()


    }
   
  }

  action void regMqtt()
  {
    registerMqtt()
  }


  private void registerMqtt() {
    //if (registered) return

    MiddlewareService service = (MiddlewareService)Sys.app.lookupService(MiddlewareService.type)
      if (service == null) {
        App.log.error("MiddlewareService is missing")
        return
      }

      MiddlewareService.registerReadOnlySlot(service.getHandle(), this, type.findSlot("actualTemp"), mqttTopic.toStr())
      MiddlewareService.registerReadOnlySlot(service.getHandle(), this, type.findSlot("setPoint"), mqttTopic.toStr())
      MiddlewareService.registerWritableSlot(service.getHandle(), this, type.findSlot("enabled"), mqttTopic.toStr())      
      MiddlewareService.registerReadOnlySlot(service.getHandle(), this, type.findSlot("isHeating"), mqttTopic.toStr()) 
      registered = true
  }

  bool registered = false
}